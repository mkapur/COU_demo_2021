# devtools::install_github('mkapur/kaputils')
require(kaputils)
require(here)
require(dplyr)
rootdir.temp <- here('ABC_base') ## folder which has the base run
catch_projections <- read.csv(here('catch_input.csv'))
state = 'base'
forecast_start = 2021
forecast_end = 2031
fixed_catches = catch_projections[catch_projections$YEAR<2021,5:ncol(catch_projections)]
Flimitfraction = catch_projections$PSTAR_0.45[catch_projections$YEAR >2020]
r = rootdir.temp,
basedir = "base_2015",
catch_proportions = catch_projections[catch_projections$YEAR==2021,5:ncol(catch_projections)],
state = 'base', ## old version was 'low/high'; base fits to par
statesex = 2, ## 2 sex model
statevals = c(0.063,0.065),
forecast_start = 2021,
forecast_end = 2031,
fixed_catches = catch_projec
foreyrs <- forecast_end-forecast_start
replist0 <- SS_output(paste0(rootdir,"/",basedir), covar = F)
## error trapping
if(length(catch_proportions) != replist0$nfishfleets) stop('catch_proportions should have a value for each fleet')
if(!exists(paste0(rootdir,"/forecasts"))) dir.create(paste0(rootdir,"/forecasts"))
# if(nrow(fixed_catches) != (forecast_start-1-inityr)) stop('fixed_catches should have a value for years before forecast_start')
if(ncol(fixed_catches) != replist0$nfishfleets) stop('fixed_catches should have a value for each fleet')
rootdir<- here('ABC_base') ## folder which has the base run
catch_projections <- read.csv(here('catch_input.csv'))
catch_proportions = catch_projections[catch_projections$YEAR==2021,5:ncol(catch_projections)]
state = 'base'
forecast_start = 2021
forecast_end = 2031
fixed_catches = catch_projections[catch_projections$YEAR<2021,5:ncol(catch_projections)]
Flimitfraction = catch_projections$PSTAR_0.45[catch_projections$YEAR >2020]
foreyrs <- forecast_end-forecast_start
if(!exists(paste0(rootdir,"/forecasts"))) dir.create(paste0(rootdir,"/forecasts"))
replist0 <- SS_output(paste0(rootdir,"/",basedir), covar = F)
## error trapping
if(length(catch_proportions) != replist0$nfishfleets) stop('catch_proportions should have a value for each fleet')
basedir = 'base_2015'
foreyrs <- forecast_end-forecast_start
if(!exists(paste0(rootdir,"/forecasts"))) dir.create(paste0(rootdir,"/forecasts"))
replist0 <- SS_output(paste0(rootdir,"/",basedir), covar = F)
## error trapping
if(length(catch_proportions) != replist0$nfishfleets) stop('catch_proportions should have a value for each fleet')
# if(nrow(fixed_catches) != (forecast_start-1-inityr)) stop('fixed_catches should have a value for years before forecast_start')
if(ncol(fixed_catches) != replist0$nfishfleets) stop('fixed_catches should have a value for each fleet')
foreyrs
t = 19
t = 10
base_temp <- paste0(rootdir,"/forecasts/forecast", (t-1)+forecast_start)
setwd(rootdir); if(exists(base_temp)) unlink(  paste0(rootdir,"/",base_temp), force = TRUE)
dir.create(base_temp)
setwd(base_temp)
file.copy(list.files(
paste0(rootdir,"/",paste0("forecasts/forecast2021")),
full.names = TRUE,
recursive = TRUE), to = base_temp, overwrite = TRUE)
## now get previous forecast only
file.copy(list.files(
paste0(rootdir,"/",paste0("forecasts/forecast",(forecast_start+t-2))),
full.names = TRUE,
recursive = TRUE)[grep('forecast.ss',list.files(
paste0(rootdir,"/",paste0("forecasts/forecast",(forecast_start+t-2))),
full.names = TRUE,
recursive = TRUE))], to = base_temp, overwrite = TRUE)
fore <- SS_readforecast(file = './forecast.ss',
Nareas = replist0$nareas,
Nfleets = replist0$nfishfleets,
nseas = 1,
version = paste(replist0$SS_versionNumeric),
readAll = TRUE)
fore$Nforecastyrs <- forecast_end-replist0$endyr
fore$FirstYear_for_caps_and_allocations <- forecast_start+(t-1)
fore$Ncatch <- replist0$nfishfleets*(t+forecast_start-replist0$endyr-2)
fore$InputBasis <- 2 ## discards
fore$ControlRuleMethod <- ifelse(replist0$SS_versionNumeric < 3.30,1,3) ## 3: ramp does catch=f(S
fore$Bmark_years[1:6] <- 0
fore$Fcast_years[1:4] <- 0
## Fix trawl relative F to reflect proportional catch amounts by fleet in forecast.
fore$fleet_relative_F <- 2 ## will cause original r4ss write_forecast to fail
fore$vals_fleet_relative_f <- paste(paste0(catch_proportions, collapse = " "))
fore$basis_for_fcast_catch_tuning <- 2 ## dead biomass
fore$Flimitfraction <- ifelse(!is.na(Flimitfraction[t]),Flimitfraction[t],Flimitfraction[t-1])
# Step 5b. Iterate the forecast file -- only if not first iter
## Find the total forecasted catch for specific years in the "mod1" object generated by SS_output below.
## Allocate this catch among the fl
forecast_start+(t-2)
mod_prev <- SS_output(paste0(rootdir,"/forecasts/forecast",(forecast_start+(t-2))), covar = FALSE) ## just load once
## get what that model indicated for the terminal year in question. This is computed using buffer AND control rule
OFLCatch_thisyear <-  mod_prev$derived_quants[grep(paste0("OFLCatch_",(forecast_start+(t-2)),collapse = "|"), mod_prev$derived_quants$Label),"Value"]
ForeCatch_thisyear <-  mod_prev$derived_quants[grep(paste0("ForeCatch_",(forecast_start+(t-2)),collapse = "|"), mod_prev$derived_quants$Label),"Value"]
ForeCatch_thisyear
OFLCatch_thisyear
mod_prev$derived_quants$Label
forecast_start+(t-2)
t = 2
base_temp <- paste0(rootdir,"/forecasts/forecast", (t-1)+forecast_start)
setwd(base_temp)
fore <- SS_readforecast(file = './forecast.ss',
Nareas = replist0$nareas,
Nfleets = replist0$nfishfleets,
nseas = 1,
version = paste(replist0$SS_versionNumeric),
readAll = TRUE)
fore$Nforecastyrs <- forecast_end-replist0$endyr
fore$FirstYear_for_caps_and_allocations <- forecast_start+(t-1)
fore$Ncatch <- replist0$nfishfleets*(t+forecast_start-replist0$endyr-2)
fore$InputBasis <- 2 ## discards
fore$ControlRuleMethod <- ifelse(replist0$SS_versionNumeric < 3.30,1,3) ## 3: ramp does catch=f(SSB), buffer on ca
fore$ForeCatch
t
forecast_start+(t-1)
## Fix forecast file to end year selectivity
fore$Bmark_years[1:6] <- 0
fore$Fcast_years[1:4] <- 0
## Fix trawl relative F to reflect proportional catch amounts by fleet in forecast.
fore$fleet_relative_F <- 2 ## will cause original r4ss write_forecast to fail
fore$vals_fleet_relative_f <- paste(paste0(catch_proportions, collapse = " "))
fore$basis_for_fcast_catch_tuning <- 2 ## dead biomass
##  Input correct buffer fraction for this year -- won't matter if CTL rule method == 3
## overwrite with previous year for final
fore$Flimitfraction <- ifelse(!is.na(Flimitfraction[t]),Flimitfraction[t],Flimitfraction[t-1])
mod_prev <- SS_output(paste0(rootdir,"/forecasts/forecast",(forecast_start+(t-2))), covar = FALSE) ## just load once
## get what that model indicated for the terminal year in question. This is computed using buffer AND control rule
OFLCatch_thisyear <-  mod_prev$derived_quants[grep(paste0("OFLCatch_",(forecast_start+(t-2)),collapse = "|"), mod_prev$derived_quants$Label),"Value"]
ForeCatch_thisyear <-  mod_prev$derived_quants[grep(paste0("ForeCatch_",(forecast_start+(t-2)),collapse = "|"), mod_prev$derived_quants$Label),"Value"]
OFLCatch_thisyear
mod_prev$derived_quants[grep(paste0("OFLCatch_",,collapse = "|"), mod_prev$derived_quants$Label),"Value"]
mod_prev$derived_quants[grep(paste0("OFLCatch_"), mod_prev$derived_quants$Label),"Value"]
mod_prev$derived_quants[grep(paste0("OFLCatch_"), mod_prev$derived_quants$Label),]
20175+15
2017+15
t
paste0(rootdir,"/forecasts/forecast",(forecast_start+(t-2))
)
source(here('ss_autoforecastTEMP.r'))
SS_autoForecastTEMP(rootdir = rootdir.temp,
basedir = "base_2015",
catch_proportions = catch_projections[catch_projections$YEAR==2021,5:ncol(catch_projections)],
state = 'base', ## old version was 'low/high'; base fits to par
statesex = 2, ## 2 sex model
statevals = c(0.063,0.065),
forecast_start = 2021,
forecast_end = 2031,
fixed_catches = catch_projections[catch_projections$YEAR<2021,5:ncol(catch_projections)],
Flimitfraction = catch_projections$PSTAR_0.45[catch_projections$YEAR >2020])
rootdir = here('ABC_base')
basedir = "base_2015"
catch_proportions = catch_projections[catch_projections$YEAR==2021,5:ncol(catch_projections)]
state = 'base'
statesex = 2
forecast_start = 2021
forecast_end = 2031
fixed_catches = catch_projections[catch_projections$YEAR<2021,5:ncol(catch_projections)]
Flimitfraction = catch_projections$PSTAR_0.45[catch_projections$YEAR >2020]
devtools::source_url("https://raw.githubusercontent.com/r4ss/r4ss/development/R/SS_ForeCatch.R") ## use dev version
# devtools::source_url("https://raw.githubusercontent.com/mkapur/kaputils/master/R/SS_writeforecastMK.R") ## use dev version
ABC <- FORECATCH <- NULL
foreyrs <- forecast_end-forecast_start
if(!exists(paste0(rootdir,"/forecasts"))) dir.create(paste0(rootdir,"/forecasts"))
replist0 <- SS_output(paste0(rootdir,"/",basedir), covar = F)
## error trapping
if(length(catch_proportions) != replist0$nfishfleets) stop('catch_proportions should have a value for each fleet')
# if(nrow(fixed_catches) != (forecast_start-1-inityr)) stop('fixed_catches should have a value for years before forecast_start')
if(ncol(fixed_catches) != replist0$nfishfleets) stop('fixed_catches should have a value for each fleet')
t = 1
base_temp <- paste0(rootdir,"/forecasts/forecast", (t-1)+forecast_start)
setwd(rootdir); if(exists(base_temp)) unlink(  paste0(rootdir,"/",base_temp), force = TRUE)
dir.create(base_temp)
setwd(base_temp)
## copy original files into new forecast folder
if(t == 1){
file.copy(from = list.files(
paste0(rootdir,"/",basedir),
full.names = TRUE,
recursive = TRUE),
to = base_temp, overwrite = TRUE)
## change init_src to 1 (read from .par)
strt <- SS_readstarter(file = "starter.ss")
strt$init_values_src <- ifelse(state == 'base',1,0)
strt$last_estimation_phase <- 10 ## could go as high as 20
SS_writestarter(strt, file = "starter.ss", overwrite = TRUE)
## add zeroes to end of par file
mpar <- readLines("ss3.par")
LOI <- grep("Fcast",mpar)+2 ## get line(s) containing data after fcast
NewLine <- strsplit(mpar[LOI],"0 ") ## split elements
length(NewLine[[1]]);length(NewLine[[2]])
for(a in 1:length(NewLine)){
ltemp <- length(NewLine[[a]])
NewLine[[a]][1:ltemp] <- " "
NewLine[[a]][1:(ltemp+(forecast_start-2-replist0$endyr))] <- 0.000000000000 ## ! need to custom this 5
mpar[LOI][a] = paste0(NewLine[[a]], collapse = " ")
}
NewLine <- strsplit(mpar[LOI],"0 ") ## split elements
length(NewLine[[1]]);length(NewLine[[2]])
writeLines(text=mpar, con="ss3.par") ## save it
}
## copy from previous year so as to retain proper catches
if(t>1){
file.copy(list.files(
paste0(rootdir,"/",paste0("forecasts/forecast2021")),
full.names = TRUE,
recursive = TRUE), to = base_temp, overwrite = TRUE)
## now get previous forecast only
file.copy(list.files(
paste0(rootdir,"/",paste0("forecasts/forecast",(forecast_start+t-2))),
full.names = TRUE,
recursive = TRUE)[grep('forecast.ss',list.files(
paste0(rootdir,"/",paste0("forecasts/forecast",(forecast_start+t-2))),
full.names = TRUE,
recursive = TRUE))], to = base_temp, overwrite = TRUE)
}
## Step 4a. Add catch/projections through given year. -- this will likely need to revert to MK version to 'build on' prev
fore <- SS_readforecast(file = './forecast.ss',
Nareas = replist0$nareas,
Nfleets = replist0$nfishfleets,
nseas = 1,
version = paste(replist0$SS_versionNumeric),
readAll = TRUE)
fore$Nforecastyrs <- forecast_end-replist0$endyr
fore$FirstYear_for_caps_and_allocations <- forecast_start+(t-1)
fore$Ncatch <- replist0$nfishfleets*(t+forecast_start-replist0$endyr-2)
fore$InputBasis <- 2 ## discards
fore$ControlRuleMethod <- 3#ifelse(replist0$SS_versionNumeric < 3.30,1,3) ## 3: ramp does catch=f(SSB), buffer on catch
fore$Nforecastyrs
forecast_end
replist0$endyr
## Now Add Catch data/projections thru the year before forecast_start.
## We want to overwrite everything because the 2015 etc catches are no longer projections, they are known
## This acts similarly to SS_ForeCatch except it reads directly from your inputs.
if(t == 1){
# inityr <- max(fore$ForeCatch$Year)
inityr <- min(catch_projections$YEAR)-1
if(inityr == Inf   | inityr == -Inf) inityr <- catch_projections$YEAR[1]-1 ## overwrite if INF
fore$ForeCatch <- data.frame('Year' = NA, 'Seas' = NA,'Fleet' = NA, 'Catch_or_F' =NA) ## overwrite entire forecatch
for(k in 1:(forecast_start-1-inityr)){
# if(class(term) =='NULL') term <- 0
term <-  ifelse(k == 1, 0, nrow(fore$ForeCatch) ) ## start from zero first time
for(i in 1:replist0$nfishfleets){
fore$ForeCatch[term+i,'Year'] <- inityr+k
fore$ForeCatch[term+i,'Seas'] <- 1
fore$ForeCatch[term+i,'Fleet'] <- i
fore$ForeCatch[term+i,'Catch_or_F'] <- fixed_catches[k,i]
} ## end nfleets
} ## end yrs to 2020
}
fore$ForeCatch
## Fix forecast file to end year selectivity
fore$Bmark_years[1:6] <- 0
fore$Fcast_years[1:4] <- 0
fore$vals_fleet_relative_f <- paste(paste0(catch_proportions, collapse = " "))
## Fix trawl relative F to reflect proportional catch amounts by fleet in forecast.
fore$fleet_relative_F <- 2 ## will cause original r4ss write_forecast to fail
fore$basis_for_fcast_catch_tuning <- 2 ## dead biomass
##  Input correct buffer fraction for this year -- won't matter if CTL rule method == 3
## overwrite with previous year for final
fore$Flimitfraction <- ifelse(!is.na(Flimitfraction[t]),Flimitfraction[t],Flimitfraction[t-1])
# Step 5b. Iterate the forecast file -- only if not first iter
## Find the total forecasted catch for specific years in the "mod1" object generated by SS_output below.
## Allocate this catch among the fleets according to the given proportions
## add this to forecast file in increments
if(t > 1){ ## add a single year of catch
## get previous model
mod_prev <- SS_output(paste0(rootdir,"/forecasts/forecast",(forecast_start+(t-2))), covar = FALSE) ## just load once
## get what that model indicated for the terminal year in question. This is computed using buffer AND control rule
OFLCatch_thisyear <-  mod_prev$derived_quants[grep(paste0("OFLCatch_",(forecast_start+(t-2)),collapse = "|"), mod_prev$derived_quants$Label),"Value"]
ForeCatch_thisyear <-  mod_prev$derived_quants[grep(paste0("ForeCatch_",(forecast_start+(t-2)),collapse = "|"), mod_prev$derived_quants$Label),"Value"]
## manually multiply OFL for this year by the buffer -- this is the ABC, for records only
ABC[t] <- OFLCatch_thisyear*Flimitfraction[t-1]
## input forecatch -- treated as gospel; save because rounding can distort
input_forecatch <- FORECATCH[t] <- ForeCatch_thisyear
tempForeCatch <- SS_ForeCatch(mod_prev,
yrs = forecast_start+(t-2), ## just do THIS year
average = FALSE,
total = input_forecatch)
# total = df$PredOFL[df$Year %in% (forecast_start+(t-2))]) ## total are the total catches for each year, given by OFLcatch
fore$ForeCatch[(nrow(fore$ForeCatch)+1):(nrow(fore$ForeCatch)+nrow(tempForeCatch)),] <- tempForeCatch[,1:4]
}
cat(paste0('Added forecast catch thru year ',forecast_start+(t-2),"\n"))
## save file
SS_writeforecastMK(fore, file = './forecast.ss',
overwrite = TRUE)
system('ss3 -nohess')
r4ss::SS_writeforecast(fore, file = './forecast.ss',
overwrite = TRUE)
t
base_temp <- paste0(rootdir,"/forecasts/forecast", (t-1)+forecast_start)
setwd(rootdir); if(exists(base_temp)) unlink(  paste0(rootdir,"/",base_temp), force = TRUE)
dir.create(base_temp)
setwd(base_temp)
paste0(rootdir,"/forecasts/forecast", (t-1)+forecast_start)
## copy original files into new forecast folder
if(t == 1){
file.copy(from = list.files(
paste0(rootdir,"/",basedir),
full.names = TRUE,
recursive = TRUE),
to = base_temp, overwrite = TRUE)
## change init_src to 1 (read from .par)
strt <- SS_readstarter(file = "starter.ss")
strt$init_values_src <- ifelse(state == 'base',1,0)
strt$last_estimation_phase <- 10 ## could go as high as 20
SS_writestarter(strt, file = "starter.ss", overwrite = TRUE)
## add zeroes to end of par file
mpar <- readLines("ss3.par")
LOI <- grep("Fcast",mpar)+2 ## get line(s) containing data after fcast
NewLine <- strsplit(mpar[LOI],"0 ") ## split elements
length(NewLine[[1]]);length(NewLine[[2]])
for(a in 1:length(NewLine)){
ltemp <- length(NewLine[[a]])
NewLine[[a]][1:ltemp] <- " "
NewLine[[a]][1:(ltemp+(forecast_start-2-replist0$endyr))] <- 0.000000000000 ## ! need to custom this 5
mpar[LOI][a] = paste0(NewLine[[a]], collapse = " ")
}
NewLine <- strsplit(mpar[LOI],"0 ") ## split elements
length(NewLine[[1]]);length(NewLine[[2]])
writeLines(text=mpar, con="ss3.par") ## save it
}
file.copy(from = list.files(
paste0(rootdir,"/",basedir),
full.names = TRUE,
recursive = TRUE),
to = base_temp, overwrite = TRUE)
strt <- SS_readstarter(file = "starter.ss")
strt$init_values_src <- ifelse(state == 'base',1,0)
strt$last_estimation_phase <- 10 ## could go as high as 20
SS_writestarter(strt, file = "starter.ss", overwrite = TRUE)
## add zeroes to end of par file
mpar <- readLines("ss3.par")
LOI <- grep("Fcast",mpar)+2 ## get line(s) containing data after fcast
NewLine <- strsplit(mpar[LOI],"0 ") ## split elements
length(NewLine[[1]]);length(NewLine[[2]])
length(NewLine[[1]]);length(NewLine[[2]])
for(a in 1:length(NewLine)){
ltemp <- length(NewLine[[a]])
NewLine[[a]][1:ltemp] <- " "
NewLine[[a]][1:(ltemp+(forecast_start-2-replist0$endyr))] <- 0.000000000000 ## ! need to custom this 5
mpar[LOI][a] = paste0(NewLine[[a]], collapse = " ")
}
NewLine <- strsplit(mpar[LOI],"0 ") ## split elements
NewLine
forecast_start
1:(ltemp+(forecast_start-2-replist0$endyr))
length(NewLine
trsplit(mpar[LOI],"0 ") ## s
grep("Fcast",mpar)+2 ## get line
strsplit(mpar[LOI],"0 ") ## spli
mpar[LOI]
strsplit(mpar[LOI],"0 ") ## split ele
strsplit(mpar[LOI],"0") ## split
strsplit(mpar[LOI]," ")
d zeroes to end of par file
mpar <- readLines("ss3.par")
LOI <- grep("Fcast",mpar)+2 ## get line(s) containing data after fcast
NewLine <- strsplit(mpar[LOI]," ") ## split elements
# length(New
for(a in 1:length(NewLine)){
ltemp <- length(NewLine[[a]])
NewLine[[a]][1:ltemp] <- " "
NewLine[[a]][1:(ltemp+(forecast_start-2-replist0$endyr))] <- 0.000000000000 ## ! need to custom this 5
mpar[LOI][a] = paste0(NewLine[[a]], collapse = " ")
}
NewLine <- strsplit(mpar[LOI],"0 ") ## split elements
length(NewLine[[1]]);length(NewLine[[2]])
writeLines(text=mpar, con="ss3.par") ## save it
mpar
NewLine
## add zeroes to end of par file
mpar <- readLines("ss3.par")
LOI <- grep("Fcast",mpar)+2 ## get line(s) containing data after fcast
NewLine <- strsplit(mpar[LOI]," ") ## split elements
NewLine
length(NewLine[[a]])
a
a=1
length(NewLine[[a]])
ltemp
## add zeroes to end of par file
mpar <- readLines("ss3.par")
LOI <- grep("Fcast",mpar)+2 ## get line(s) containing data after fcast
NewLine <- strsplit(mpar[LOI]," ") ## split elements
NewLine
mpar[LOI]
## add zeroes to end of par file
mpar <- readLines("ss3.par")
LOI <- grep("Fcast",mpar)+2 ## get line(s) containing data after fcast
mpar[LOI]
NewLine <- strsplit(mpar[LOI]," ") ## split elements
NewLine
length(NewLine)
file.copy(from = list.files(
paste0(rootdir,"/",basedir),
full.names = TRUE,
recursive = TRUE),
to = base_temp, overwrite = TRUE)
## add zeroes to end of par file
mpar <- readLines("ss3.par")
LOI <- grep("Fcast",mpar)+2 ## get line(s) containing data after fcast
strsplit(mpar[LOI]," ")
LOI
mpar[LOI]
grep("Fcast",mpar)
LOI <- grep("Fcast",mpar)+1 ## get line(s) containing data after fcast
NewLine <- strsplit(mpar[LOI]," ") ## split elements
NewLine
NewLine <- strsplit(mpar[LOI],"0 ") ## split elements
NewLine
a
ltemp <- length(NewLine[[a]])
ltemp
ltemp
for(a in 1:length(NewLine)){
ltemp <- length(NewLine[[a]])
NewLine[[a]][1:ltemp] <- " " ## overwrite all fcast values
NewLine[[a]][1:(ltemp+(forecast_start-2-replist0$endyr))] <- 0.000000000000 ## ! need to custom this 5
mpar[LOI][a] = paste0(NewLine[[a]], collapse = " ")
}
NewLine
# NewLine <- strsplit(mpar[LOI],"0 ") ## split elements
# length(NewLine[[1]]);length(NewLine[[2]])
writeLines(text=mpar, con="ss3.par") ## save it
## Step 4a. Add catch/projections through given year. -- this will likely need to revert to MK version to 'build on' prev
fore <- SS_readforecast(file = './forecast.ss',
Nareas = replist0$nareas,
Nfleets = replist0$nfishfleets,
nseas = 1,
version = paste(replist0$SS_versionNumeric),
readAll = TRUE)
fore$Nforecastyrs <- forecast_end-replist0$endyr
fore$FirstYear_for_caps_and_allocations <- forecast_start+(t-1)
fore$Ncatch <- replist0$nfishfleets*(t+forecast_start-replist0$endyr-2)
fore$InputBasis <- 2 ## discards
fore$ControlRuleMethod <- 3#ifelse(replist0$SS_versionNumeric < 3.30,1,3) ## 3: ramp does catch=f(SSB), buffer on catch
## Now Add Catch data/projections thru the year before forecast_start.
## We want to overwrite everything because the 2015 etc catches are no longer projections, they are known
## This acts similarly to SS_ForeCatch except it reads directly from your inputs.
if(t == 1){
# inityr <- max(fore$ForeCatch$Year)
inityr <- min(catch_projections$YEAR)-1
if(inityr == Inf   | inityr == -Inf) inityr <- catch_projections$YEAR[1]-1 ## overwrite if INF
fore$ForeCatch <- data.frame('Year' = NA, 'Seas' = NA,'Fleet' = NA, 'Catch_or_F' =NA) ## overwrite entire forecatch
for(k in 1:(forecast_start-1-inityr)){
# if(class(term) =='NULL') term <- 0
term <-  ifelse(k == 1, 0, nrow(fore$ForeCatch) ) ## start from zero first time
for(i in 1:replist0$nfishfleets){
fore$ForeCatch[term+i,'Year'] <- inityr+k
fore$ForeCatch[term+i,'Seas'] <- 1
fore$ForeCatch[term+i,'Fleet'] <- i
fore$ForeCatch[term+i,'Catch_or_F'] <- fixed_catches[k,i]
} ## end nfleets
} ## end yrs to 2020
}
## Fix forecast file to end year selectivity
fore$Bmark_years[1:6] <- 0
fore$Fcast_years[1:4] <- 0
## Fix trawl relative F to reflect proportional catch amounts by fleet in forecast.
fore$fleet_relative_F <- 2 ## will cause original r4ss write_forecast to fail
fore$vals_fleet_relative_f <- paste(paste0(catch_proportions, collapse = " "))
fore$basis_for_fcast_catch_tuning <- 2 ## dead biomass
##  Input correct buffer fraction for this year -- won't matter if CTL rule method == 3
## overwrite with previous year for final
fore$Flimitfraction <- ifelse(!is.na(Flimitfraction[t]),Flimitfraction[t],Flimitfraction[t-1])
# Step 5b. Iterate the forecast file -- only if not first iter
## Find the total forecasted catch for specific years in the "mod1" object generated by SS_output below.
## Allocate this catch among the fleets according to the given proportions
## add this to forecast file in increments
if(t > 1){ ## add a single year of catch
## get previous model
mod_prev <- SS_output(paste0(rootdir,"/forecasts/forecast",(forecast_start+(t-2))), covar = FALSE) ## just load once
## get what that model indicated for the terminal year in question. This is computed using buffer AND control rule
OFLCatch_thisyear <-  mod_prev$derived_quants[grep(paste0("OFLCatch_",(forecast_start+(t-2)),collapse = "|"), mod_prev$derived_quants$Label),"Value"]
ForeCatch_thisyear <-  mod_prev$derived_quants[grep(paste0("ForeCatch_",(forecast_start+(t-2)),collapse = "|"), mod_prev$derived_quants$Label),"Value"]
## manually multiply OFL for this year by the buffer -- this is the ABC, for records only
ABC[t] <- OFLCatch_thisyear*Flimitfraction[t-1]
## input forecatch -- treated as gospel; save because rounding can distort
input_forecatch <- FORECATCH[t] <- ForeCatch_thisyear
tempForeCatch <- SS_ForeCatch(mod_prev,
yrs = forecast_start+(t-2), ## just do THIS year
average = FALSE,
total = input_forecatch)
# total = df$PredOFL[df$Year %in% (forecast_start+(t-2))]) ## total are the total catches for each year, given by OFLcatch
fore$ForeCatch[(nrow(fore$ForeCatch)+1):(nrow(fore$ForeCatch)+nrow(tempForeCatch)),] <- tempForeCatch[,1:4]
}
## save file
SS_writeforecastMK(fore, file = './forecast.ss',
overwrite = TRUE)
system('ss3 -nohess')
source(here('ss_autoforecastTEMP.r'))
SS_autoForecastTEMP(rootdir = here('ABC_base'), ## folder which has the base run
basedir = "base_2015",
catch_proportions = catch_projections[catch_projections$YEAR==2021,5:ncol(catch_projections)],
state = 'base', ## old version was 'low/high'; base fits to par
statesex = 2, ## 2 sex model
statevals = c(0.063,0.065),
forecast_start = 2021,
forecast_end = 2031,
fixed_catches = catch_projections[catch_projections$YEAR<2021,5:ncol(catch_projections)],
Flimitfraction = catch_projections$PSTAR_0.45[catch_projections$YEAR >2020])
source(here('ss_autoforecastTEMP.r'))
SS_autoForecastTEMP(rootdir = here('ABC_base'), ## folder which has the base run
basedir = "base_2015",
catch_proportions = catch_projections[catch_projections$YEAR==2021,5:ncol(catch_projections)],
state = 'base', ## old version was 'low/high'; base fits to par
statesex = 2, ## 2 sex model
statevals = c(0.063,0.065),
forecast_start = 2021,
forecast_end = 2031,
fixed_catches = catch_projections[catch_projections$YEAR<2021,5:ncol(catch_projections)],
Flimitfraction = catch_projections$PSTAR_0.45[catch_projections$YEAR >2020])
warnings()
